syntax = "proto3";
package helium;

enum origin {
  p2p = 0;
  radio = 1;
}

message blockchain_poc_receipt_v1 {
  bytes gateway = 1;
  uint64 timestamp = 2;
  sint32 signal = 3;
  bytes data = 4;
  origin origin = 5;
  bytes signature = 6;
  float snr = 7;
  float frequency = 8;
  int32 channel = 9;
  string datarate = 10;
  bytes addr_hash = 11;
  // Transmit power at which this packet was transmitted
  // It is x10, for example: 270 = 27db, 36 = 3.6db etc
  int32 tx_power = 12;
  // fixed point reward shares added by off-chain poc verifier,
  // propose 2 decimal places
  uint32 reward_shares = 13;
  // NOTE: reward_unit and hex_scale are ignored when signing the receipt txn
  // integer representation of a 4-point precision decimal multiplier
  // based on the number of witnesses to a poc event
  uint32 reward_unit = 14;
  // integer representation of a 4-point precision decimal multiplier
  // ex: 5015 == 0.5015
  uint32 hex_scale = 15;
}

message blockchain_poc_witness_v1 {
  bytes gateway = 1;
  uint64 timestamp = 2;
  sint32 signal = 3;
  bytes packet_hash = 4;
  bytes signature = 5;
  float snr = 6;
  float frequency = 7;
  int32 channel = 8;
  string datarate = 9;
  // fixed point reward shares added by off-chain poc verifier,
  // propose 2 decimal places
  uint32 reward_shares = 10;
  // NOTE: reward_unit and hex_scale are ignored when signing the receipt txn
  // integer representation of a 4-point precision decimal multiplier
  // based on the number of witnesses to a poc event
  uint32 reward_unit = 11;
  // integer representation of a 4-point precision decimal multiplier
  // ex: 5015 == 0.5015
  uint32 hex_scale = 12;
}

message blockchain_poc_response_v1 {
  oneof payload {
    blockchain_poc_receipt_v1 receipt = 1;
    blockchain_poc_witness_v1 witness = 2;
  }
}

message blockchain_poc_path_element_v1 {
  bytes challengee = 1;
  blockchain_poc_receipt_v1 receipt = 2;
  repeated blockchain_poc_witness_v1 witnesses = 3;
}
